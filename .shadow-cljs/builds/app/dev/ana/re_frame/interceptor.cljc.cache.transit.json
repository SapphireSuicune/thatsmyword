["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.optional_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.optional_interceptor_keys))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___24036 = arguments.length;\nvar i__5727__auto___24037 = (0);\nwhile(true){\nif((i__5727__auto___24037 < len__5726__auto___24036)){\nargs__5732__auto__.push((arguments[i__5727__auto___24037]));\n\nvar G__24038 = (i__5727__auto___24037 + (1));\ni__5727__auto___24037 = G__24038;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__24006){\nvar map__24007 = p__24006;\nvar map__24007__$1 = cljs.core.__destructure_map(map__24007);\nvar m = map__24007__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24007__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar comment = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24007__$1,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24007__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24007__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5802__auto___24039 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([re_frame.interceptor.optional_interceptor_keys], 0)));\nif(temp__5802__auto___24039){\nvar unknown_keys_24040 = temp__5802__auto___24039;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_24040], 0));\n} else {\n}\n} else {\n}\n\nvar G__24008 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__5002__auto__ = id;\nif(cljs.core.truth_(or__5002__auto__)){\nreturn or__5002__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\nif(cljs.core.truth_(comment)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__24008,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),comment);\n} else {\nreturn G__24008;\n}\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq24005){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24005));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__24011 = arguments.length;\nswitch (G__24011) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___24042 = arguments.length;\nvar i__5727__auto___24043 = (0);\nwhile(true){\nif((i__5727__auto___24043 < len__5726__auto___24042)){\nargs__5732__auto__.push((arguments[i__5727__auto___24043]));\n\nvar G__24044 = (i__5727__auto___24043 + (1));\ni__5727__auto___24043 = G__24044;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((3) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5733__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq24012){\nvar G__24013 = cljs.core.first(seq24012);\nvar seq24012__$1 = cljs.core.next(seq24012);\nvar G__24014 = cljs.core.first(seq24012__$1);\nvar seq24012__$2 = cljs.core.next(seq24012__$1);\nvar G__24015 = cljs.core.first(seq24012__$2);\nvar seq24012__$3 = cljs.core.next(seq24012__$2);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24013,G__24014,G__24015,seq24012__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__24018 = arguments.length;\nswitch (G__24018) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___24047 = arguments.length;\nvar i__5727__auto___24048 = (0);\nwhile(true){\nif((i__5727__auto___24048 < len__5726__auto___24047)){\nargs__5732__auto__.push((arguments[i__5727__auto___24048]));\n\nvar G__24050 = (i__5727__auto___24048 + (1));\ni__5727__auto___24048 = G__24050;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((3) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5733__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq24020){\nvar G__24021 = cljs.core.first(seq24020);\nvar seq24020__$1 = cljs.core.next(seq24020);\nvar G__24022 = cljs.core.first(seq24020__$1);\nvar seq24020__$2 = cljs.core.next(seq24020__$1);\nvar G__24023 = cljs.core.first(seq24020__$2);\nvar seq24020__$3 = cljs.core.next(seq24020__$2);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24021,G__24022,G__24023,seq24020__$3);\n}));\n\nre_frame.interceptor.exception__GT_ex_info = (function re_frame$interceptor$exception__GT_ex_info(e,interceptor,direction){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3([\"Interceptor Exception: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.ex_message(e))].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"direction\",\"direction\",-633359395),direction,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(interceptor)], null),e);\n});\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(p__24024,interceptor,direction){\nvar map__24025 = p__24024;\nvar map__24025__$1 = cljs.core.__destructure_map(map__24025);\nvar context = map__24025__$1;\nvar original_exception_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24025__$1,new cljs.core.Keyword(\"re-frame.interceptor\",\"original-exception?\",\"re-frame.interceptor/original-exception?\",-527923945));\nvar f = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.not(f)){\nreturn context;\n} else {\nif(cljs.core.truth_(original_exception_QMARK_)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null, context));\n} else {\ntry{return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null, context));\n}catch (e24026){var e = e24026;\nthrow re_frame.interceptor.exception__GT_ex_info(e,interceptor,direction);\n}\n}\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while its `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__24053 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__24053;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__24028 = arguments.length;\nswitch (G__24028) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\nre_frame.interceptor.execute_STAR_ = (function re_frame$interceptor$execute_STAR_(ctx){\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(ctx,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\nre_frame.interceptor.merge_ex_data = (function re_frame$interceptor$merge_ex_data(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___24058 = arguments.length;\nvar i__5727__auto___24059 = (0);\nwhile(true){\nif((i__5727__auto___24059 < len__5726__auto___24058)){\nargs__5732__auto__.push((arguments[i__5727__auto___24059]));\n\nvar G__24060 = (i__5727__auto___24059 + (1));\ni__5727__auto___24059 = G__24060;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((1) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((1)),(0),null)):null);\nreturn re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5733__auto__);\n});\n\n(re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic = (function (e,ms){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(cljs.core.ex_message(e),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.merge,cljs.core.ex_data(e),ms),cljs.core.ex_cause(e));\n}));\n\n(re_frame.interceptor.merge_ex_data.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(re_frame.interceptor.merge_ex_data.cljs$lang$applyTo = (function (seq24029){\nvar G__24030 = cljs.core.first(seq24029);\nvar seq24029__$1 = cljs.core.next(seq24029);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24030,seq24029__$1);\n}));\n\nre_frame.interceptor.default_error_handler = (function re_frame$interceptor$default_error_handler(original_error,re_frame_error){\nvar map__24031 = cljs.core.ex_data(re_frame_error);\nvar map__24031__$1 = cljs.core.__destructure_map(map__24031);\nvar event_v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24031__$1,new cljs.core.Keyword(null,\"event-v\",\"event-v\",1378681365));\nvar direction = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24031__$1,new cljs.core.Keyword(null,\"direction\",\"direction\",-633359395));\nvar interceptor = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24031__$1,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076));\nvar event_handler_QMARK_ = (function (){var fexpr__24032 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),null,new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),null,new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),null], null), null);\nreturn (fexpr__24032.cljs$core$IFn$_invoke$arity$1 ? fexpr__24032.cljs$core$IFn$_invoke$arity$1(interceptor) : fexpr__24032.call(null, interceptor));\n})();\ncljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(re_frame.loggers.console,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"An error occured while handling the re-frame event:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(event_v),\"\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str,(cljs.core.truth_(event_handler_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Within the\",cljs.core.first(event_v),\"event handler function.\"], null):new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Within the\",direction,\"phase of the\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([interceptor], 0)),\"interceptor.\"], null)))], 0));\n\nthrow original_error;\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of interceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :fx  [:dispatch [:an-event-id :param1]]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat analogous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nvar ctx = re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors);\nvar error_handler = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__23884__auto___24062 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__23884__auto___24062);\n\n} else {\n}\n\nif(cljs.core.not(error_handler)){\nreturn re_frame.interceptor.execute_STAR_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"re-frame.interceptor\",\"original-exception?\",\"re-frame.interceptor/original-exception?\",-527923945),true));\n} else {\ntry{return re_frame.interceptor.execute_STAR_(ctx);\n}catch (e24033){var e = e24033;\nvar G__24034 = cljs.core.ex_cause(e);\nvar G__24035 = re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic(e,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"event-v\",\"event-v\",1378681365),event_v], null)], 0));\nreturn (error_handler.cljs$core$IFn$_invoke$arity$2 ? error_handler.cljs$core$IFn$_invoke$arity$2(G__24034,G__24035) : error_handler.call(null, G__24034,G__24035));\n}}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^P","~$set","~$clojure.set","~$u","~$re-frame.utils","~$re-frame.trace","^T","~$re-frame.registrar","^U","~$cljs.core","^V","~$goog","^W","~$registrar","^U","~$trace","^T","^S","^S","^R","^R","~$re-frame.loggers","^Z"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$console","^Z","~$empty-queue","^P","~$debug-enabled?","^P"],"~:require-macros",["^ ","^T","^T","^Y","^T","^V","^V"],"~:form",["~#list",["~$ns","^J",["^17",["^10",["^Z","~:refer",["^12"]],["^P","^19",["^13","^14"]],["^T","~:as","^Y","~:include-macros",true],["^U","^1:","^X"],["^S","^1:","~$u"],["^R","^1:","^Q"]]]]],"~:flags",["^ ","^10",["^H",[]]],"~:js-deps",[],"~:deps",["^W","^V","^Z","^P","^T","^U","^S","^R"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1722915051967,"^K",["^ ","^P","^P","^Q","^R","~$u","^S","^T","^T","^U","^U","^V","^V","^W","^W","^X","^U","^Y","^T","^S","^S","^R","^R","^Z","^Z"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n   [re-frame.loggers :refer [console]]\n   [re-frame.interop :refer [empty-queue debug-enabled?]]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.registrar :as registrar]\n   [re-frame.utils :as u]\n   [clojure.set :as set]))\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(def optional-interceptor-keys #{:comment})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys\n          (-> m keys set (set/difference optional-interceptor-keys)))))\n\n(defn ->interceptor\n  [& {:as m :keys [id comment before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys\n                                optional-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  (cond-> {:id     (or id :unnamed)\n           :before before\n           :after  after}\n    comment (assoc :comment comment)))\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n(defn- exception->ex-info [e interceptor direction]\n  (ex-info (str \"Interceptor Exception: \" #?(:clj (.getMessage e) :cljs (ex-message e)))\n           {:direction direction\n            :interceptor (:id interceptor)}\n           e))\n\n(defn- invoke-interceptor-fn\n  [{::keys [original-exception?] :as context} interceptor direction]\n  (let [f (get interceptor direction)]\n    (cond\n      (not f) context\n      original-exception? (f context)\n      :else\n      (try\n        (f context)\n        (catch #?(:clj Exception :cljs :default) e\n          (throw (exception->ex-info e interceptor direction)))))))\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n       (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n       (assoc-coeffect :original-event event)\n       (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n(defn execute*\n  [ctx]\n  (-> ctx\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n\n(defn- merge-ex-data [e & ms]\n  (ex-info #?(:clj (.getMessage e) :cljs (ex-message e))\n           (apply merge (ex-data e) ms)\n           #?(:clj (.getCause e) :cljs (ex-cause e))))\n\n(defn default-error-handler [original-error re-frame-error]\n  (let [{:keys [event-v direction interceptor]} (ex-data re-frame-error)\n        event-handler? (#{:db-handler :fx-handler :ctx-handler} interceptor)]\n    (apply console :error\n           \"An error occured while handling the re-frame event:\"\n           (str event-v)\n           \"\\n\"\n           (map str\n                (if event-handler?\n                  [\"Within the\" (first event-v) \"event handler function.\"]\n                  [\"Within the\" direction \"phase of the\" (pr-str interceptor) \"interceptor.\"])))\n    (throw original-error)))\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (let [ctx (context event-v interceptors)\n        error-handler (registrar/get-handler :error :event-handler)]\n    (trace/merge-trace!\n     {:tags {:interceptors interceptors}})\n    (if-not error-handler\n      (execute* (assoc ctx ::original-exception? true))\n      (try\n        (execute* ctx)\n        (catch #?(:clj Exception :cljs :default) e\n          (error-handler (ex-cause e)\n                         (merge-ex-data e {:event-v event-v})))))))\n","~:reader-features",["^H",["~:cljs"]],"~:used-var-namespaces",["^H",["^P","^J","^T","^U","^V","~$js","^R","^Z"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/optional-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","clojure.set.difference","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__24006","map__24007","cljs.core/--destructure-map","cljs.core.get","seq24005","self__5712__auto__","cljs.core/seq","id","comment","before","after","re-frame.interop/debug-enabled?","temp__5802__auto__","unknown-keys","re_frame.loggers.console","G__24008","or__5002__auto__","cljs.core.assoc","G__24011","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq24012","G__24013","cljs.core/first","cljs.core/next","G__24014","G__24015","self__5711__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__24018","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq24020","G__24021","G__24022","G__24023","re-frame.interceptor/exception->ex-info","e","interceptor","direction","cljs.core.ex_info","cljs.core/ex-message","p__24024","map__24025","re-frame.interceptor/invoke-interceptor-fn","original-exception?","cljs.core/not","e24026","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__24028","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute*","ctx","re-frame.interceptor/merge-ex-data","seq24029","G__24030","ms","cljs.core/merge","cljs.core/ex-data","cljs.core/ex-cause","re-frame.interceptor/default-error-handler","original-error","re-frame-error","map__24031","event-v","event-handler?","fexpr__24032","re-frame.loggers/console","cljs.core.map","cljs.core/str","cljs.core.pr_str","re-frame.interceptor/execute","error-handler","re_frame.registrar.get_handler","re-frame.trace/is-trace-enabled?","new-trace__23884__auto__","cljs.core.merge","re-frame.trace/*current-trace*","e24033","G__24034","G__24035","re_frame.interceptor.merge_ex_data"]],"~:used-vars",["^H",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/str","~$cljs.core/ex-message","~$re-frame.registrar/get-handler","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/exception->ex-info","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$cljs.core/pr-str","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$re-frame.interceptor/default-error-handler","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/optional-interceptor-keys","~$re-frame.interceptor/change-direction","~$cljs.core/ex-cause","~$cljs.core/ex-info","~$re-frame.trace/*current-trace*","~$re-frame.interceptor/merge-ex-data","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$re-frame.interceptor/execute*","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/ex-data","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^1@","reagent/impl/batching.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^W","^V","~$reagent.debug","~$reagent.impl.util"]]],["^1@","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.dom.HtmlElement"]]],["^1@","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1@","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.asserts"]]],["^1@","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1@","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3<","^3=","^3@","^3;","^3>","^3?"]]],["^1@","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3;"]]],["^1@","re_frame/loggers.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^R"]]],["^1@","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@"]]],["^1@","reagent/impl/util.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","~$clojure.string","~$clojure.walk","~$goog.object","^38"]]],["^1@","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3<","~$goog.reflect","^3;"]]],["^1@","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1@","re_frame/registrar.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^P","^Z","~$re-frame.settings"]]],["^1@","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3<","^3;"]]],["^1@","reagent/ratom.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^39","^38","~$reagent.impl.batching","^R","^3I"]]],["^1@","re_frame/interop.cljs"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1@","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1@","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["7f6b2c1886b435ca01b8d1201a3aaf0f998520e0","93a021dca5c9b562f1e0577e488e9413c111cf9f","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1@","shadow/js.js"],["a4e3c7d5715a3aa1582c3021d3bd4823bbff020a","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","reagent/impl/template.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^C","^3G","^39","~$reagent.impl.component","^3T","~$reagent.impl.input","~$reagent.impl.protocols","^3X","^38","^3I"]]],["^1@","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@"]]],"~:SHADOW-TIMESTAMP",[1722740017000,1722740017000,1722740014000],["^40","node_modules/react/cjs/react.development.js"],["7f6b2c1886b435ca01b8d1201a3aaf0f998520e0","93a021dca5c9b562f1e0577e488e9413c111cf9f","754b7a48941975257c8955f6d5e511cb3a878737","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^41","~$module$node_modules$object_assign$index"]]],["^1@","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","^3M"]]],["^1@","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.events.ListenableKey"]]],["^1@","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","~$goog.fs.blob","^3C","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3E","^3F"]]],["^1@","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.array","~$goog.events.Listener","^3I"]]],["^1@","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3E","~$goog.html.SafeUrl","^3F","^3@","^3;"]]],["^1@","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4;","~$goog.html.SafeStyle","^4?","^3D","~$goog.html.uncheckedconversions","^3E","^3;"]]],["^1@","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.dom.TagName","^3@","~$goog.dom.element"]]],["^1@","reagent/impl/component.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^3I","^C","^39","^3T","^46","^3X","^38"]]],["^1@","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V"]]],["^1@","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3E","^4;","^4D","~$goog.html.SafeStyleSheet","^4?","^4F","^3D","^3F","^3@","^3J","^4=","^3I","^3;","~$goog.dom.tags","^4<"]]],["^1@","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3I"]]],["^1@","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^4=","^3;","^3<"]]],["^1@","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","re_frame/settings.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^P","^Z"]]],["^1@","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^4=","^3@","^4@","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4F","~$goog.dom.safe","^4C","^4E","~$goog.math.Coordinate","~$goog.math.Size","^3I","~$goog.string","^3E","~$goog.string.Unicode","^3B"]]],["^1@","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.debug.Error","^4K"]]],["^1@","reagent/impl/protocols.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V"]]],["^1@","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^4=","^3@","~$goog.collections.maps","^4O","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3="]]],["^1@","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^40","node_modules/object-assign/index.js"],["7f6b2c1886b435ca01b8d1201a3aaf0f998520e0","93a021dca5c9b562f1e0577e488e9413c111cf9f","519ffd5a4c91b67302cc9947b794966d629860cd","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^41"]]],["^1@","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3P","^3B"]]],["^1@","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",[]]],["^1@","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^4=","^3I"]]],["^1@","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^4O","~$goog.string.StringBuffer"]]],["^40","node_modules/react/cjs/react.production.min.js"],["7f6b2c1886b435ca01b8d1201a3aaf0f998520e0","93a021dca5c9b562f1e0577e488e9413c111cf9f","0a81b45abe33f0ad39b726512604018f94261db9","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^41","^48"]]],["^1@","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@"]]],["^1@","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^4L","^4E","^3E","^3;"]]],["^1@","re_frame/interceptor.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^Z","^P","^T","^U","^S","^R"]]],["^1@","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3;","^3?"]]],["^1@","reagent/core.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^C","~$reagent.impl.template","^44","^39","^3T","^46","^3X","^38"]]],["^1@","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^4=","~$goog.debug.errorcontext"]]],["^1@","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.math"]]],["^1@","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.flags"]]],["^1@","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3N","~$goog.dom","^4F","^4B","^3J","^3K"]]],["^1@","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^4K","^4F"]]],["^1@","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","^4C","^4;","^4D","^4H","^4?","^3D","^3E","^3;"]]],["^1@","re_frame/utils.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^Z","^P"]]],["^1@","reagent/impl/input.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^44","^3T","^46"]]],["^1@","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.Disposable","~$goog.events.EventId"]]],["^1@","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.math.Long","~$goog.math.Integer","^4O","^3I","^4=","~$goog.Uri","^4W"]]],["^1@","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3E","^3F","^4<","^3@"]]],["^1@","reagent/debug.cljs"],["3065b833bf592bae8f60616f5cab1597e9f657d1","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V"]]],["^1@","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3E","^4D","^3F","^3I","^3@","^3;"]]],["^1@","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3M","^3B"]]],["^1@","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3M"]]],["^1@","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3B"]]],["^1@","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V"]]],["^1@","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","^4O"]]],["^1@","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3@","^3F"]]],["^1@","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^3Z"]]],["^1@","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W"]]],["^1@","re_frame/trace.cljc"],["74e132cc593ed2d72a5d4874954c58677a905f0e","^34",["^ ","^35",null,"^36",["^H",[]],"^37",["^W","^V","^P","^Z","^4B"]]]]],"~:clj-info",["^ ","jar:file:/home/seth/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1722738698000,"jar:file:/home/seth/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1722738709000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1722738698000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1722740014000,"jar:file:/home/seth/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/interop.clj",1722914887000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1722738698000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1722738698000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/reagent/reagent/1.1.1/reagent-1.1.1.jar!/reagent/interop.clj",1722738705000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1722740014000,"jar:file:/home/seth/.m2/repository/reagent/reagent/1.1.1/reagent-1.1.1.jar!/reagent/ratom.clj",1722738705000,"jar:file:/home/seth/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1722738698000,"jar:file:/home/seth/.m2/repository/re-frame/re-frame/1.4.3/re-frame-1.4.3.jar!/re_frame/trace.cljc",1722914887000,"jar:file:/home/seth/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1722911797000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1722740014000,"jar:file:/home/seth/.m2/repository/reagent/reagent/1.1.1/reagent-1.1.1.jar!/reagent/core.clj",1722738705000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1722738698000,"jar:file:/home/seth/.m2/repository/reagent/reagent/1.1.1/reagent-1.1.1.jar!/reagent/debug.clj",1722738705000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1722740014000,"jar:file:/home/seth/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1722738698000,"jar:file:/home/seth/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1722740014000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^P","^P","^Q","^R","~$u","^S","^T","^T","^U","^U","^V","^V","^W","^W","^X","^U","^Y","^T","^S","^S","^R","^R","^Z","^Z"],"^[",["^H",["^10"]],"~:shadow/js-access-global",["^H",["Error"]],"^11",["^ ","^12","^Z","^13","^P","^14","^P"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",47,"^8",7,"^9",47,"^:",20,"~:arglists",["^17",["~$quote",["^17",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^17",["^6:","^6;","~$f","^6<"]]],"^68",["^17",[["^6:","^6;","~$f","~$&","^6<"]]],"~:arglists-meta",["^17",[null]]]],"^I","^22","^6","re_frame/interceptor.cljc","^:",20,"^6=",["^ ","^6>",true,"^6?",3,"^6@",3,"^6A",[["^17",["^6:","^6;","~$f","^6<"]]],"^68",["^17",[["^6:","^6;","~$f","~$&","^6<"]]],"^6B",["^17",[null]]],"^6A",[["^17",["^6:","^6;","~$f","^6<"]]],"~:protocol-impl",null,"^6?",3,"^6B",["^17",[null]],"^8",1,"^6>",true,"~:methods",[["^ ","^6?",3,"^6>",true,"~:tag","~$any"]],"^7",47,"~:ret-tag","^6F","^9",47,"^6@",3,"~:fn-var",true,"^68",["^17",[["^6:","^6;","~$f","~$&","^6<"]]]],"~$invoke-interceptors",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",89,"^8",8,"^9",89,"^:",27,"~:private",true,"^68",["^17",["^69",["^17",[["^6:","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^6J",true,"^I","^25","^6","re_frame/interceptor.cljc","^:",27,"^6A",["^17",[["^6:","^6K"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",89,"^9",89,"^6@",2,"^6H",true,"^68",["^17",["^69",["^17",[["^6:","^6K"]]]]],"^6L","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",21,"^68",["^17",["^69",["^17",[["^6:","^6;","~$value"]]]]]],"^I","^2E","^6","re_frame/interceptor.cljc","^:",21,"^6A",["^17",[["^6:","^6;","^6N"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",61,"^6G",["^H",["~$clj","^6F"]],"^9",61,"^6@",3,"^6H",true,"^68",["^17",["^69",["^17",[["^6:","^6;","^6N"]]]]]],"~$exception->ex-info",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",71,"^8",8,"^9",71,"^:",26,"^6J",true,"^68",["^17",["^69",["^17",[["~$e","~$interceptor","^6K"]]]]]],"^6J",true,"^I","^21","^6","re_frame/interceptor.cljc","^:",26,"^6A",["^17",[["~$e","^6Q","^6K"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",71,"^6G","~$cljs.core/ExceptionInfo","^9",71,"^6@",3,"^6H",true,"^68",["^17",["^69",["^17",[["~$e","^6Q","^6K"]]]]]],"~$update-coeffect",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",65,"^8",7,"^9",65,"^:",22,"^68",["^17",["^69",["^17",[["^6:","^6;","~$f","~$&","^6<"]]]]],"^6=",["^ ","^6>",true,"^6?",3,"^6@",3,"^6A",[["^17",["^6:","^6;","~$f","^6<"]]],"^68",["^17",[["^6:","^6;","~$f","~$&","^6<"]]],"^6B",["^17",[null]]]],"^I","^2B","^6","re_frame/interceptor.cljc","^:",22,"^6=",["^ ","^6>",true,"^6?",3,"^6@",3,"^6A",[["^17",["^6:","^6;","~$f","^6<"]]],"^68",["^17",[["^6:","^6;","~$f","~$&","^6<"]]],"^6B",["^17",[null]]],"^6A",[["^17",["^6:","^6;","~$f","^6<"]]],"^6C",null,"^6?",3,"^6B",["^17",[null]],"^8",1,"^6>",true,"^6D",[["^ ","^6?",3,"^6>",true,"^6E","^6F"]],"^7",65,"^6G","^6F","^9",65,"^6@",3,"^6H",true,"^68",["^17",[["^6:","^6;","~$f","~$&","^6<"]]]],"~$invoke-interceptor-fn",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",77,"^8",8,"^9",77,"^:",29,"^6J",true,"^68",["^17",["^69",["^17",[[["^ ","~:re-frame.interceptor/keys",["~$original-exception?"],"^1:","^6:"],"^6Q","^6K"]]]]]],"^6J",true,"^I","^2[","^6","re_frame/interceptor.cljc","^:",29,"^6A",["^17",[["~$p__24024","^6Q","^6K"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",77,"^6G",["^H",[null,"^6F","~$clj-nil"]],"^9",77,"^6@",3,"^6H",true,"^68",["^17",["^69",["^17",[[["^ ","^6U",["^6V"],"^1:","^6:"],"^6Q","^6K"]]]]]],"~$get-effect",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",35,"^8",7,"^9",35,"^:",17,"^68",["^17",["^69",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","~$not-found"]]]]],"^6=",["^ ","^6>",false,"^6?",3,"^6@",3,"^6A",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]],"^68",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]]],"^6B",["^17",[null,null,null]]]],"^I","^1P","^6","re_frame/interceptor.cljc","^:",17,"^6=",["^ ","^6>",false,"^6?",3,"^6@",3,"^6A",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]],"^68",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]]],"^6B",["^17",[null,null,null]]],"^6A",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]],"^6C",null,"^6?",3,"^6B",["^17",[null,null,null]],"^8",1,"^6>",false,"^6D",[["^ ","^6?",1,"^6>",false,"^6E","^6F"],["^ ","^6?",2,"^6>",false,"^6E","^6F"],["^ ","^6?",3,"^6>",false,"^6E",["^H",[null,"^6F"]]]],"^7",35,"^9",35,"^6@",3,"^6H",true,"^68",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]]]],"~$->interceptor",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",20,"^8",7,"^9",20,"^:",20,"^68",["^17",["^69",["^17",[["~$&",["^ ","^1:","~$m","~:keys",["~$id","~$comment","~$before","~$after"]]]]]]],"^6=",["^ ","^6>",true,"^6?",0,"^6@",0,"^6A",[["^17",[["^ ","^1:","~$m","^70",["^71","^72","^73","^74"]]]]],"^68",["^17",[["~$&",["^ ","^1:","~$m","^70",["^71","^72","^73","^74"]]]]],"^6B",["^17",[null]]]],"^I","^1X","^6","re_frame/interceptor.cljc","^:",20,"^6=",["^ ","^6>",true,"^6?",0,"^6@",0,"^6A",[["^17",[["^ ","^1:","~$m","^70",["^71","^72","^73","^74"]]]]],"^68",["^17",[["~$&",["^ ","^1:","~$m","^70",["^71","^72","^73","^74"]]]]],"^6B",["^17",[null]]],"^6A",[["^17",[["^ ","^1:","~$m","^70",["^71","^72","^73","^74"]]]]],"^6C",null,"^6?",0,"^6B",["^17",[null]],"^8",1,"^6>",true,"^6D",[["^ ","^6?",0,"^6>",true,"^6E",["^H",["^6O","^6F","~$cljs.core/IMap"]]]],"^7",20,"^6G","^6F","^9",20,"^6@",0,"^6H",true,"^68",["^17",[["~$&",["^ ","^1:","~$m","^70",["^71","^72","^73","^74"]]]]]],"~$merge-ex-data",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",164,"^8",8,"^9",164,"^:",21,"^6J",true,"^68",["^17",["^69",["^17",[["~$e","~$&","~$ms"]]]]],"^6=",["^ ","^6>",true,"^6?",1,"^6@",1,"^6A",[["^17",["~$e","^77"]]],"^68",["^17",[["~$e","~$&","^77"]]],"^6B",["^17",[null]]]],"^6J",true,"^I","^2L","^6","re_frame/interceptor.cljc","^:",21,"^6=",["^ ","^6>",true,"^6?",1,"^6@",1,"^6A",[["^17",["~$e","^77"]]],"^68",["^17",[["~$e","~$&","^77"]]],"^6B",["^17",[null]]],"^6A",[["^17",["~$e","^77"]]],"^6C",null,"^6?",1,"^6B",["^17",[null]],"^8",1,"^6>",true,"^6D",[["^ ","^6?",1,"^6>",true,"^6E","^6R"]],"^7",164,"^6G","^6F","^9",164,"^6@",1,"^6H",true,"^68",["^17",[["~$e","~$&","^77"]]]],"~$execute*",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",157,"^8",7,"^9",157,"^:",15,"^68",["^17",["^69",["^17",[["~$ctx"]]]]]],"^I","^2S","^6","re_frame/interceptor.cljc","^:",15,"^6A",["^17",[["^79"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",157,"^6G","^6F","^9",157,"^6@",1,"^6H",true,"^68",["^17",["^69",["^17",[["^79"]]]]]],"~$get-coeffect",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",53,"^8",7,"^9",53,"^:",19,"^68",["^17",["^69",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]]]]],"^6=",["^ ","^6>",false,"^6?",3,"^6@",3,"^6A",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]],"^68",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]]],"^6B",["^17",[null,null,null]]]],"^I","^2N","^6","re_frame/interceptor.cljc","^:",19,"^6=",["^ ","^6>",false,"^6?",3,"^6@",3,"^6A",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]],"^68",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]]],"^6B",["^17",[null,null,null]]],"^6A",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]],"^6C",null,"^6?",3,"^6B",["^17",[null,null,null]],"^8",1,"^6>",false,"^6D",[["^ ","^6?",1,"^6>",false,"^6E","^6F"],["^ ","^6?",2,"^6>",false,"^6E","^6F"],["^ ","^6?",3,"^6>",false,"^6E",["^H",[null,"^6F"]]]],"^7",53,"^9",53,"^6@",3,"^6H",true,"^68",["^17",[["^6:"],["^6:","^6;"],["^6:","^6;","^6Z"]]]],"~$execute",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",182,"^8",7,"^9",182,"^:",14,"^68",["^17",["^69",["^17",[["~$event-v","~$interceptors"]]]]],"^6L","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^I","^1V","^6","re_frame/interceptor.cljc","^:",14,"^6A",["^17",[["^7<","^7="]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",182,"^6G",["^H",[null,"^6F"]],"^9",182,"^6@",2,"^6H",true,"^68",["^17",["^69",["^17",[["^7<","^7="]]]]],"^6L","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^68",["^17",["^69",["^17",[["^6:","^6;","^6N"]]]]]],"^I","^2Q","^6","re_frame/interceptor.cljc","^:",19,"^6A",["^17",[["^6:","^6;","^6N"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",43,"^6G",["^H",["^6O","^6F"]],"^9",43,"^6@",3,"^6H",true,"^68",["^17",["^69",["^17",[["^6:","^6;","^6N"]]]]]],"~$enqueue",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",125,"^8",7,"^9",125,"^:",14,"^68",["^17",["^69",["^17",[["^6:","^7="]]]]]],"^I","^28","^6","re_frame/interceptor.cljc","^:",14,"^6A",["^17",[["^6:","^7="]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",125,"^6G",["^H",["^6O","^6F"]],"^9",125,"^6@",2,"^6H",true,"^68",["^17",["^69",["^17",[["^6:","^7="]]]]]],"~$mandatory-interceptor-keys",["^ ","^I","^31","^6","re_frame/interceptor.cljc","^7",10,"^8",1,"^9",10,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",10,"^8",6,"^9",10,"^:",32],"^6E","~$cljs.core/ISet"],"~$interceptor?",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",14,"^8",7,"^9",14,"^:",19,"^68",["^17",["^69",["^17",[["~$m"]]]]]],"^I","^2R","^6","re_frame/interceptor.cljc","^:",19,"^6A",["^17",[["~$m"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",14,"^6G","~$boolean","^9",14,"^6@",1,"^6H",true,"^68",["^17",["^69",["^17",[["~$m"]]]]]],"~$default-error-handler",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",169,"^8",7,"^9",169,"^:",28,"^68",["^17",["^69",["^17",[["~$original-error","~$re-frame-error"]]]]]],"^I","^2@","^6","re_frame/interceptor.cljc","^:",28,"^6A",["^17",[["^7E","^7F"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",169,"^6G","~$ignore","^9",169,"^6@",2,"^6H",true,"^68",["^17",["^69",["^17",[["^7E","^7F"]]]]]],"~$change-direction",["^ ","^67",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",144,"^8",8,"^9",144,"^:",24,"^6J",true,"^68",["^17",["^69",["^17",[["^6:"]]]]],"^6L","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6J",true,"^I","^2H","^6","re_frame/interceptor.cljc","^:",24,"^6A",["^17",[["^6:"]]],"^6C",null,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^7",144,"^6G",["^H",["^6O","^6F"]],"^9",144,"^6@",1,"^6H",true,"^68",["^17",["^69",["^17",[["^6:"]]]]],"^6L","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6:",["^ ","^67",null,"^5",["^ ","^6J",true,"^6","re_frame/interceptor.cljc","^:",15,"^6=",["^ ","^6>",false,"^6?",3,"^6@",3,"^6A",[["~$event","^7="],["^7I","^7=","~$db"]],"^68",["^17",[["^7I","^7="],["^7I","^7=","^7J"]]],"^6B",["^17",[null,null]]],"^8",8,"^7",131,"^9",131,"^68",["^17",["^69",["^17",[["^7I","^7="],["^7I","^7=","^7J"]]]]],"^6L","Create a fresh context"],"^6J",true,"^I","^1O","^6","re_frame/interceptor.cljc","^:",15,"^6=",["^ ","^6>",false,"^6?",3,"^6@",3,"^6A",[["^7I","^7="],["^7I","^7=","^7J"]],"^68",["^17",[["^7I","^7="],["^7I","^7=","^7J"]]],"^6B",["^17",[null,null]]],"^6A",[["^7I","^7="],["^7I","^7=","^7J"]],"^6C",null,"^6?",3,"^6B",["^17",[null,null]],"^8",1,"^6>",false,"^6D",[["^ ","^6?",2,"^6>",false,"^6E",["^H",["^6O","^6F"]]],["^ ","^6?",3,"^6>",false,"^6E",["^H",["^6O","^6F"]]]],"^7",131,"^9",131,"^6@",3,"^6H",true,"^68",["^17",[["^7I","^7="],["^7I","^7=","^7J"]]],"^6L","Create a fresh context"],"~$optional-interceptor-keys",["^ ","^I","^2G","^6","re_frame/interceptor.cljc","^7",12,"^8",1,"^9",12,"^:",31,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",12,"^8",6,"^9",12,"^:",31],"^6E","^7A"]],"^15",["^ ","^T","^T","^Y","^T","^V","^V"],"~:cljs.analyzer/constants",["^ ","^[",["^H",["~:unnamed","~:tags","~:original-event","~:interceptor","~:event-handler","~:else","~:db","~:fx-handler","~:queue","~:db-handler","~:event","~:after","~:id","~:effects","~:comment","~:event-v","~:stack","~:re-frame.interceptor/original-exception?","~:error","~:coeffects","~:interceptors","~:ctx-handler","~:before","~:direction"]],"~:order",["^7X","^7Y","^87","^7[","^83","^7M","^7Z","^84","^88","^7P","^82","^7R","^7U","^81","^7W","^7O","^7S","^80","^7T","^7V","^86","^7Q","^7N","^85"]],"^1<",["^ ","^10",["^H",[]]],"^1=",[],"^1>",["^W","^V","^Z","^P","^T","^U","^S","^R"]],"^M","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^33",[["^8<","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^8<","~:shadow-tweaks"],null,["^8<","~:source-map-inline"],null,["^8<","~:shadow-optimize-constants"],null,["^8<","~:elide-asserts"],false,["^8<","~:optimize-constants"],null,["^8<","^1C"],null,["^8<","~:external-config"],null,["^8<","~:tooling-config"],null,["^8<","~:emit-constants"],null,["^8<","~:load-tests"],null,["^8<","~:form-size-threshold"],null,["^8<","~:global-goog-object&array"],null,["^8<","~:data-readers"],null,["^8<","~:infer-externs"],"~:auto",["^8<","^1E"],null,["^8>","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8<","~:fn-invoke-direct"],null,["^8<","~:source-map"],"/dev/null"]]]